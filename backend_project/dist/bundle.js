(()=>{"use strict";const e=require("express"),s=require("sequelize"),t=JSON.parse('{"A":{"username":"postgres","password":"123qwe","database":"TASK_MANAGEMENT","host":"localhost","dialect":"postgres","port":"5432"}}').A,a=new s.Sequelize(t.database,t.username,t.password,{host:t.host,dialect:t.dialect,port:t.port});a.authenticate().then((()=>console.log("Connected to the database successfully."))).catch((e=>console.error("Unable to connect to the database:",e)));const r=a,o=r.define("User",{id:{autoIncrement:!0,type:s.DataTypes.BIGINT,allowNull:!1,primaryKey:!0},username:{type:s.DataTypes.STRING,allowNull:!1,unique:!0},password:{type:s.DataTypes.STRING,allowNull:!1},role:{type:s.DataTypes.STRING,allowNull:!0},email:{type:s.DataTypes.STRING,allowNull:!1,unique:!0},status:{type:s.DataTypes.BOOLEAN,defaultValue:!0},create_date:{type:s.DataTypes.DATE,defaultValue:s.DataTypes.NOW},update_date:s.DataTypes.DATE},{tableName:"users",timestamps:!1}),n=r.define("Task",{id:{autoIncrement:!0,type:s.DataTypes.BIGINT,allowNull:!1,primaryKey:!0},main_title:{type:s.DataTypes.STRING,allowNull:!1},sub_title:{type:s.DataTypes.STRING},description:{type:s.DataTypes.TEXT},assigned_to:{type:s.DataTypes.INTEGER},duration:{type:s.DataTypes.INTEGER},day_period:{type:s.DataTypes.STRING},status:{type:s.DataTypes.STRING},ending_date:{type:s.DataTypes.DATE},comments:{type:s.DataTypes.TEXT},is_archive:{type:s.DataTypes.BOOLEAN,defaultValue:!1},create_date:{type:s.DataTypes.DATE,defaultValue:s.DataTypes.NOW}},{tableName:"tasks",timestamps:!1}),i=require("jsonwebtoken"),d=process.env.JWT_SECRET||"your_jwt_secret_key",l=(e,s,t)=>{const a=e.headers.authorization,r=a&&a.split(" ")[1];if(!r)return s.status(401).json({message:"Access denied. No token provided."});console.log(r),i.verify(r,d,((a,r)=>{if(a)return s.status(403).json({message:"Invalid or expired token."});e.user=r,t()}))},u=e.Router();u.post("/createTask",(async(e,s)=>{try{const{main_title:t,sub_title:a,description:r,assigned_to:o,duration:i,day_period:d,status:l,ending_date:u,comments:c,is_archive:y}=e.body,p=await n.create({main_title:t,sub_title:a,description:r,assigned_to:o,duration:i,day_period:d,status:l,ending_date:u,comments:c,is_archive:y});s.status(201).json({message:"Task saved successfully",task:p})}catch(e){console.error("Error creating task:",e),s.status(500).json({message:"Internal Server Error"})}})),u.get("/getAllTasks",l,(async(e,t)=>{try{const e=await n.findAll({where:{is_archive:!1},include:[{model:o,as:"User",attributes:["username"]}],attributes:{include:[[s.Sequelize.literal("DATE_PART('day', CURRENT_DATE::date - DATE_TRUNC('day', \"Task\".\"create_date\"::date))"),"days_since_creation"]]},order:[["id","ASC"]]});t.status(200).json(e)}catch(e){console.error("Error fetching tasks:",e),t.status(500).json({message:"Internal Server Error"})}})),u.get("/getTaskById/:id",(async(e,s)=>{try{const{id:t}=e.params,a=await n.findByPk(t);if(!a)return s.status(404).json({message:"Task not found"});s.status(200).json(a)}catch(e){console.error("Error fetching task by ID:",e),s.status(500).json({message:"Internal Server Error"})}})),u.put("/updateTask/:id",(async(e,s)=>{try{const{id:t}=e.params,{main_title:a,sub_title:r,description:o,assigned_to:i,duration:d,day_period:l,status:u,ending_date:c,comments:y,is_archive:p}=e.body,T=await n.findByPk(t);if(!T)return s.status(404).json({message:"Task not found"});T.main_title=a||T.main_title,T.sub_title=r||T.sub_title,T.description=o||T.description,T.assigned_to=i||T.assigned_to,T.duration=d||T.duration,T.day_period=l||T.day_period,T.status=u||T.status,T.ending_date=c||T.ending_date,T.comments=y||T.comments,T.is_archive=p||T.is_archive,await T.save(),s.status(200).json(T)}catch(e){console.error("Error updating task:",e),s.status(500).json({message:"Internal Server Error"})}})),u.delete("/deleteTask/:id",(async(e,s)=>{try{const{id:t}=e.params;console.log("id = "+t);const a=await n.findByPk(t);if(console.log("task = "+a),!a)return s.status(404).json({message:"Task not found"});await a.destroy(),s.status(200).json({message:"Task deleted successfully"})}catch(e){console.error("Error deleting task:",e),s.status(500).json({message:"Internal Server Error"})}})),u.put("/archiveTask/:id",l,(async(e,s)=>{try{const{id:t}=e.params,a=await n.findByPk(t);if(!a)return s.status(404).json({message:"Task not found"});a.is_archive=!0,await a.save(),s.status(200).json({message:"Task archived successfully",task:a})}catch(e){console.error("Error archiving task:",e),s.status(500).json({message:"Internal Server Error"})}})),u.get("/getAllArchiveTasks",l,(async(e,t)=>{try{const e=await n.findAll({where:{is_archive:!0},include:[{model:o,as:"User",attributes:["username"]}],attributes:{include:[[s.Sequelize.literal("DATE_PART('day', CURRENT_DATE::date - DATE_TRUNC('day', \"Task\".\"create_date\"::date))"),"days_since_creation"]]}});t.status(200).json(e)}catch(e){console.error("Error fetching tasks:",e),t.status(500).json({message:"Internal Server Error"})}})),u.post("/updateTaskStatus/:id",(async(e,s)=>{try{const{id:t}=e.params,a=await n.findByPk(t);if(!a)return s.status(404).json({message:"Task not found"});a.status="completed",await a.save(),s.status(200).json({message:"Task status updated successfully",task:a})}catch(e){console.error("Error updating task status:",e),s.status(500).json({message:"Internal Server Error"})}}));const c=u,y=require("bcrypt"),p=process.env.JWT_SECRET||"your_jwt_secret_key",T=e.Router();T.post("/createUser",(async(e,s)=>{try{const{username:t,password:a,email:r,status:n,role:i}=e.body,d=await y.hash(a,10),l=await o.create({username:t,password:d,email:r,status:n,role:i});s.status(201).json({message:"User created successfully",user:l})}catch(e){console.error("Error creating user:",e),s.status(500).json({message:"Internal Server Error"})}})),T.get("/getAllUsers",l,(async(e,s)=>{try{const e=await o.findAll({order:[["id","ASC"]]});s.status(200).json(e)}catch(e){console.error("Error fetching users:",e),s.status(500).json({message:"Internal Server Error"})}})),T.get("/getUserById/:id",l,(async(e,s)=>{try{const{id:t}=e.params,a=await o.findByPk(t);if(!a)return s.status(404).json({message:"User not found"});s.status(200).json(a)}catch(e){console.error("Error fetching user by ID:",e),s.status(500).json({message:"Internal Server Error"})}})),T.put("/updateUser/:id",(async(e,s)=>{try{const{id:t}=e.params,{username:a,password:r,email:n,status:i,role:d}=e.body,l=await o.findByPk(t);if(!l)return s.status(404).json({message:"User not found"});const u=await y.hash(r,10);l.username=e.body.userName||l.username,l.password=u||l.password,l.email=n||l.email,l.status=void 0!==i?i:l.status,l.update_date=new Date,l.role=d||e.body.role,await l.save(),s.status(201).json({message:"User updated successfully",user:l})}catch(e){console.error("Error updating user:",e),s.status(500).json({message:"Internal Server Error"})}})),T.post("/login",(async(e,s)=>{try{const{username:t,password:a}=e.body,r=await o.findOne({where:{username:t}});if(!r)return s.status(404).json({message:"User not found"});if(!await y.compare(a,r.password))return s.status(400).json({message:"Invalid credentials"});const n={id:r.id,username:r.username,status:r.status},d=i.sign(n,p,{expiresIn:"1h"});s.status(200).json({token:d,username:r.username})}catch(e){console.error("Error logging in:",e),s.status(500).json({message:"Internal Server Error"})}})),T.delete("/deleteUser/:id",(async(e,s)=>{try{const{id:t}=e.params,a=await o.findByPk(t);if(!a)return s.status(404).json({message:"User not found"});await a.destroy(),s.status(200).json({message:"User deleted successfully"})}catch(e){console.error("Error deleting user:",e),s.status(500).json({message:"Internal Server Error"})}})),T.get("/validateToken",((e,s,t)=>{const a=e.headers.authorization,r=a&&a.split(" ")[1];if(!r)return s.status(401).json({message:"Access denied. No token provided."});console.log(r),i.verify(r,p,((t,a)=>t?s.status(403).json({message:"Invalid or expired token."}):(e.user=a,s.status(200).json({message:"OK"}))))}));const m=T,g=r.define("TaskDetails",{id:{autoIncrement:!0,type:s.DataTypes.BIGINT,allowNull:!1,primaryKey:!0},addition_no:{type:s.DataTypes.INTEGER,allowNull:!1},created_date:{type:s.DataTypes.DATE,defaultValue:s.DataTypes.NOW},day:{type:s.DataTypes.STRING},description:{type:s.DataTypes.TEXT},addition_date:{type:s.DataTypes.DATE,allowNull:!0},taskId:{type:s.DataTypes.BIGINT,allowNull:!1,references:{model:n,key:"id"}}},{tableName:"task_details",timestamps:!1});g.belongsTo(n,{foreignKey:"taskId"});const _=g,f=e.Router();f.post("/createTaskDetails",(async(e,s)=>{try{const{day:t,description:a,taskId:r,addition_date:o}=e.body;if(!r)return s.status(400).json({error:"Task ID is required"});const n=await _.findOne({where:{taskId:r},order:[["addition_no","DESC"]]});let i=1;n&&(i=n.addition_no+1);const d=await _.create({addition_no:i,day:t,description:a,taskId:r,addition_date:o});return s.status(201).json({message:"TaskDetails created successfully",data:d})}catch(e){return console.error(e),s.status(500).json({message:"Server Error",error:e.message})}})),f.get("/getDetailsByTaskId/:id",(async(e,t)=>{try{const{id:a}=e.params;if(console.log(e.params),!a)return t.status(400).json({error:"Task ID is required"});const r=await n.findOne({where:{id:a}}),o=await _.findAll({where:{taskId:a},attributes:{include:[[s.Sequelize.literal("DATE_PART('day', CURRENT_DATE::date - DATE_TRUNC('day', \"TaskDetails\".\"created_date\"::date))"),"days_since_creation"]]},order:[["id","ASC"]]});return o.length?t.status(200).json({message:"Task and TaskDetails retrieved successfully",task:r,taskDetails:o}):t.status(404).json({message:"No TaskDetails found for this Task ID"})}catch(e){return console.error(e),t.status(500).json({message:"Server Error",error:e.message})}}));const k=f,h=r.define("Roles",{id:{autoIncrement:!0,type:s.DataTypes.BIGINT,allowNull:!1,primaryKey:!0},role_name:{type:s.DataTypes.STRING,allowNull:!1},create_date:{type:s.DataTypes.DATE,defaultValue:s.DataTypes.NOW}},{tableName:"roles",timestamps:!1}),E=e.Router();E.get("/getRoles",(async(e,s)=>{try{const e=await h.findAll();s.status(200).json({roles:e})}catch(e){console.error("Error fetching roles:",e),s.status(500).json({message:"Internal Server Error"})}}));const D=E,w=require("cors"),I=process.env.PORT||8e3,j=e();j.use(e.json()),j.use(w({origin:"http://localhost:4200",methods:["GET","POST","PUT","DELETE"],allowedHeaders:["Content-Type","Authorization"]})),j.use("/api/task",c),j.use("/api/user",m),j.use("/api/taskdetail",k),j.use("/api/roles",D),j.use(((e,s,t,a)=>{console.error(e.stack),t.status(500).send("Something broke!")})),o.hasMany(n,{foreignKey:"assigned_to"}),n.belongsTo(o,{foreignKey:"assigned_to"}),r.sync({alter:!0}).then((()=>console.log("Database synced successfully"))).catch((e=>console.error("Unable to sync the database:",e))),j.listen(I,(()=>{console.log(`Server is running on http://localhost:${I}`)}))})();